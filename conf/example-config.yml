flags:
    show_video: True # show video with cv2
    save_influx: True # save detection position data in influxdb
    rtmp_output: False # stream video to rtmp server (with bounding boxes)
    show_matplot: False # show live coordinates with matplotlib
    detections_to_global: False # transform detections coordinates to global coordinates (transformation matrix must be set)
    save_video_local: False # save output videos locally
    save_coordinates_to_file: False # save coordinates per stream to file

general:
    classes: [0] # classes to detect (0 = person)

hardware: # gpu or cpu devices for every single stream ('cpu', 0, 1, 2, ...)
    device_1: 0 # stream 1 -> 1st gpu device
    device_2: 1 # stream 2 -> 2nd gpu device
    device_3: 2 # stream 3 -> 3rd gpu device

rtmp:
    input:
        video_1: "./data/campus/campus4-c0.avi" # video path for stream 1
        video_2: "./data/campus/campus4-c1.avi" # video path for stream 2
        video_3: "./data/campus/campus4-c2.avi" # video path for stream 3
        t_matrix_1: # transformation matrix for stream 1
            [
                [-0.211332, -0.405226, 70.781223],
                [-0.019746, -1.564936, 226.377280],
                [-0.000025, -0.001961, 0.160791],
            ]
        t_matrix_2: # transformation matrix for stream 2
            [
                [0.000745, 0.350335, -98.376103],
                [-0.164871, -0.390422, 54.081423],
                [0.000021, -0.001668, 0.111075],
            ]
        t_matrix_3: # transformation matrix for stream 3
            [
                [0.089976, 1.066795, -152.055667],
                [-0.116343, 0.861342, -75.122116],
                [0.000015, 0.001442, -0.064065],
            ]
    output:
        video_1: "rtmp://localhost:1935/live/588fa378-3ac9-4abb-bb3a-7539ce0b0821" # rtmp output for stream 1
        video_2: "rtmp://localhost:1935/live/588fa378-3ac9-4abb-bb3a-7539ce0b0822" # rtmp output for stream 2
        video_3: "rtmp://localhost:1935/live/588fa378-3ac9-4abb-bb3a-7539ce0b0823" # rtmp output for stream 3

influxdb:
    url: http://localhost:8086 # influxdb url
    token: SECRET # influxdb token
    org: hackathon-thurgau # influxdb org
    bucket: position_data # influxdb bucket
    field: person # influxdb field

yolo:
    weights: "./weights/yolov7.pt" # yolov7 weights
    conf_thres: 0.25 # confidence threshold
    iou_thres: 0.45 # NMS IoU threshold

strongsort:
    weights: "./weights/osnet_x0_75_msmt17.pt" # strongsort weights
    config:
        ECC: False # activate camera motion compensation
        MC_LAMBDA: 0.995 # matching with both appearance (1 - MC_LAMBDA) and motion cost
        EMA_ALPHA: 0.9 # updates  appearance  state in  an exponential moving average manner
        MAX_DIST: 0.2 # The matching threshold. Samples with larger distance are considered an invalid match
        MAX_IOU_DISTANCE: 0.7 # Gating threshold. Associations with cost larger than this value are disregarded.
        MAX_AGE: 1000 # Maximum number of missed misses before a track is deleted
        N_INIT: 3 # Number of frames that a track remains in initialization phase
        NN_BUDGET: 100 # Maximum size of the appearance descriptors gallery
